<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一些工具使用心得</title>
    <url>/2024/01/15/2024%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/</url>
    <content><![CDATA[<h2 id="1-工作思维变革"><a href="#1-工作思维变革" class="headerlink" title="1. 工作思维变革"></a>1. 工作思维变革</h2><blockquote>
<p>如何高效利用检索工具和智能工具（如 chargtp）。在软件工程师的日常工作中会遇到大量 bug 和问题。那么，如何思维解决这些问题呢？<br>大致分为理念问题、逻辑问题、文字错误问题。可见这些问题是由抽象到逻辑到具体的问题。下面将分而细化地说明解释。</p>
</blockquote>
<h3 id="1-1理念问题"><a href="#1-1理念问题" class="headerlink" title="1.1理念问题"></a>1.1 理念问题</h3><blockquote>
<p>此问题宏观大至宇宙万物真理起源灭迹，小至个体生物情感观念。在工作中具体多为方案的排列组合不同，据不同人有不同意见；又或者是公司价值与个人理念、利益等不同。<br>这类问题需要顺应中道而得其治。往往无正确与错误答案，只在并发相冲相容。</p>
</blockquote>
<h3 id="1-2-逻辑问题"><a href="#1-2-逻辑问题" class="headerlink" title="1.2 逻辑问题"></a>1.2 逻辑问题</h3><blockquote>
<p>此类问题不赘述其他，以软件视角看待。<br>多为代码逻辑不通或者是错误的逻辑设计，不符合预期要求的皆可以称为逻辑错误。<br>要解决此类问题可分为以下几步</p>
<blockquote>
<p>a. 理解正确的逻辑要求，对比错误逻辑要求。<br>b. 定位错误逻辑要求代码范围。（最好初步详细到具体文件）；次步再定位具体代码段。<br>c. 阅读分析代码逻辑<br>d. 修改与正确作对比<br>e. 测试正确则过，不正确返回 c 步骤（前提是正确定位到逻辑错误的代码）<br>此些过程中 ai 和检索可以给到逻辑分析帮助。开源的情况下可以帮助定位代码。关键在于正确的描述给检索和 ai 以定位较为正确或者类似回答。</p>
</blockquote>
</blockquote>
<h3 id="1-3-文字错误问题"><a href="#1-3-文字错误问题" class="headerlink" title="1.3 文字错误问题"></a>1.3 文字错误问题</h3><blockquote>
<p>此类问题属于杂而多，因为市场上开源包和各个应用版本的迭代导致诸多类似不兼容（多在构建与编译时）。<br>一般的代码语法错误，较为简单。<br>具备明显错误无法运行。ai 与检索多可以帮助完全解决。但是最好开始具体情况看报错描述。</p>
</blockquote>
]]></content>
      <categories>
        <category>工具、逻辑理解</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>辅助工具</tag>
        <tag>逻辑思维</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 环境变量重复</title>
    <url>/2022/08/22/env%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE%E9%87%8D%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="话不多说，上代码"><a href="#话不多说，上代码" class="headerlink" title="话不多说，上代码"></a>话不多说，上代码</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">lx <span class="built_in">set</span> user define <span class="built_in">env</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user_defind_env start</span></span><br><span class="line">DEFIND_ENV_PATH=("/opt/gk7205v200-toolchains/arm-gcc6.3-linux-uclibceabi/bin" \</span><br><span class="line">                 "/home/lx/gkipc_aiot/tools/toolchains/hcc_riscv32/bin" \</span><br><span class="line">                 "/home/lx/toolchains/hcc_riscv32/bin")</span><br><span class="line">user_defind_env()</span><br><span class="line">{</span><br><span class="line">        int=0</span><br><span class="line">        while(( $int &lt; 3 ))</span><br><span class="line">        do</span><br><span class="line"></span><br><span class="line">                ENV_PATH=`env| grep -o ${DEFIND_ENV_PATH[$int]}:`</span><br><span class="line">                if [ ${ENV_PATH} ];then</span><br><span class="line">                        echo "${DEFIND_ENV_PATH[$int]}": already in the env!</span><br><span class="line">                else</span><br><span class="line">                        #export PATH=${DEFIND_ENV_PATH[$int]}:$PATH</span><br><span class="line">                        echo "${DEFIND_ENV_PATH[$int]}": setting env success!                   </span><br><span class="line">                fi</span><br><span class="line">                let "int++"</span><br><span class="line">        done</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">user_defind_env</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user_defind_env end</span></span><br></pre></td></tr></tbody></table></figure>
<p>int 变量随 DEFIND_ENV_PATH 一样，每次添加路径放在 DEFIND_ENV_PATH 中记得变量后的空格。<br>之所以加”:” 参与判断是因为防止同一个路径不同子目录设置或是上级目录作为变量时的情况。</p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>系统存在多个版本时的使用</title>
    <url>/2022/08/21/%E5%A4%9A%E7%89%88%E6%9C%ACpython%E7%9A%84%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>每次都必须关注一下目前的环境，任何软件的运行离不开它的运行环境！<br>Ubuntu18.04</p>
<h3 id="查看当前系统的python"><a href="#查看当前系统的python" class="headerlink" title="查看当前系统的python"></a>查看当前系统的 python</h3><p>1.<code>whereis python</code><br>2. 查看当前系统中装有哪些 python<br><code>ls /usr/bin/python</code> 按 Tab 补齐查看安装多少版本 python。<br>或是使用包管理工具查看如：<br><code>apt list |grep -n "python"</code>；不过过于繁琐，不推荐使用，一般在需要详细关注安装包时使用。<br>3. 查看当前使用的 python<br><code>python --version</code><br><code>pip --version</code></p>
<h3 id="修改环境，使用你需要用到的python支持"><a href="#修改环境，使用你需要用到的python支持" class="headerlink" title="修改环境，使用你需要用到的python支持"></a>修改环境，使用你需要用到的 python 支持</h3><p>由于我使用的是 python3.7，而当前的版本是 2.7，所以修改链接或是别名，具体需要看调用 python 时的别名<br>家目录下：<br><code>ln -s /usr/bin/python3.7 /use/bin/python3</code><br>或者<br><code>alias python3.7 python</code><br>或者直接修改用户配置：~/.bashrc 文件</p>
<h3 id="使用时出现的一些错误"><a href="#使用时出现的一些错误" class="headerlink" title="使用时出现的一些错误"></a>使用时出现的一些错误</h3><p>1. 无法导入包<br>一般是该支持包未安装，科学上网并安装<br>2. 安装包时总是出现错误<br>如：<br>`<br>  Exception:<br>Traceback (most recent call last):<br>  File “/usr/share/python-wheels/urllib3-1.19.1-py2.py3-none-any.whl/urllib3/connectionpool.py”, line 391, in _make_request<br>    six.raise_from(e, None)<br>  File “<string>“, line 2, in raise_from<br>  File “/usr/share/python-wheels/urllib3-1.19.1-py2.py3-none-any.whl/urllib3/connectionpool.py”, line 387, in _make_request<br>    httplib_response = conn.getresponse()<br>  File “/usr/lib/python3.7/http/client.py”, line 1321, in getresponse<br>    response.begin()<br>  File “/usr/lib/python3.7/http/client.py”, line 296, in begin<br>    version, status, reason = self._read_status()<br>  File “/usr/lib/python3.7/http/client.py”, line 257, in _read_status<br>    line = str(self.fp.readline(_MAXLINE + 1), “iso-8859-1”)<br>  File “/usr/lib/python3.7/socket.py”, line 589, in readinto<br>    return self._sock.recv_into(b)<br>  File “/usr/lib/python3.7/ssl.py”, line 1049, in recv_into<br>    return self.read(nbytes, buffer)<br>  File “/usr/lib/python3.7/ssl.py”, line 908, in read<br>    return self._sslobj.read(len, buffer)<br>socket.timeout: The read operation timed out</string></p>
<p>During handling of the above exception, another exception occurred:</p>
<p>`</p>
<p>这是因为 python 的安装支持包路径错误导致<br>在配置文件中导入:</p>
<p><code>export PYTHONPATH=$PYTHONPATH:/usr/lib/python3/dist-packages</code><br>然后再次安装。</p>
<h3 id="再次使用python时还是报错无法导入包"><a href="#再次使用python时还是报错无法导入包" class="headerlink" title="再次使用python时还是报错无法导入包"></a>再次使用 python 时还是报错无法导入包</h3><p>已经使用了 pip3 install<br>`<br>  ImportError: cannot import name ‘_counter’ from ‘Crypto.Util’ (/usr/lib/python3/dist-packages/Crypto/Util/<strong>init</strong>.py):<br>  File “/home/lx/gkipc_aiot/sdk/SConstruct”, line 34:<br>    from scripts import pkt_builder<br>  File “/home/lx/gkipc_aiot/sdk/build/scripts/pkt_builder.py”, line 24:<br>    import make_upg_file as MAKE_IMAGE<br>  File “/home/lx/gkipc_aiot/sdk/build/scripts/make_upg_file.py”, line 30:<br>    from Crypto.PublicKey import RSA<br>  File “/usr/lib/python3/dist-packages/Crypto/PublicKey/RSA.py”, line 78:<br>    from Crypto import Random<br>  File “/usr/lib/python3/dist-packages/Crypto/Random/<strong>init</strong>.py”, line 29:<br>    from Crypto.Random import _UserFriendlyRNG<br>  File “/usr/lib/python3/dist-packages/Crypto/Random/_UserFriendlyRNG.py”, line 38:<br>    from Crypto.Random.Fortuna import FortunaAccumulator<br>  File “/usr/lib/python3/dist-packages/Crypto/Random/Fortuna/FortunaAccumulator.py”, line 39:<br>    from . import FortunaGenerator<br>  File “/usr/lib/python3/dist-packages/Crypto/Random/Fortuna/FortunaGenerator.py”, line 35:<br>    from Crypto.Util import Counter<br>  File “/usr/lib/python3/dist-packages/Crypto/Util/Counter.py”, line 59:<br>    from Crypto.Util import _counter</p>
<p>`</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一些调试中遇到的问题虽然千奇百怪，但是它们之间都有相应的逻辑可循，因此弄明白事情的前因后果非常重要！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>环境</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>环境、编译、烧录的过往总结</title>
    <url>/2022/08/19/env_compile_brun_debug/</url>
    <content><![CDATA[<p>遵循如下过程以减少开发中出现的错误。<br>1. 应该弄清楚需要做什么，也就是需求。(弄明白你要做什么非常重要，往大了说人生价值所在。往小了说，做一件事情需要有一件事情的缘由。)<br>2. 需要知道怎样去做，严格遵循所需要的支持。(好比要运行 C 程序必须有 C 语言的支持！)<br>3. 实现、创造！(在 1、2 步骤的前提条件之下按照规则是实现所需。)<br>4. 测试 (反复多元的测试，以及利用工具帮助测试)<br>5. 成果 (也是考验其价值)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1---&gt;2---&gt;3---&gt;4(判断)\</span><br><span class="line">true---&gt;5\</span><br><span class="line">flase---&gt;3</span><br></pre></td></tr></tbody></table></figure>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>开发环境：<br>由于 arm 与 x86 的差异，还有就是开发板的资源问题。一般会搭建以 PC 为工作端，linux 服务器为交叉编译端，开发板为烧录端的连接环境下进行开发。需要用到一些 tcp、ip、ssh 等一些协议工具<br>重要：这些环境的配置应该按照核心板的原厂支持进行配置。<br>就是程序在什么样的条件下进行运行。嵌入式 linux 的开发还上位机的 QT 环境。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>嵌入式的开发不得不提到交叉编译。由于开发板所需要的执行文件是另一个架构的，而需要在不同架构直接编译出别的架构的可执行文件就需要用到交叉编译器。就好像 x86 的执行程序不能在<br>arm 下执行，如果需要编出在 arm 下执行文件就需要通过交叉编译器编译出另外架构的可执行文件。</p>
<h3 id="编译时候常遇到的一些问题"><a href="#编译时候常遇到的一些问题" class="headerlink" title="编译时候常遇到的一些问题"></a>编译时候常遇到的一些问题</h3><p>1. 缺少.o 文件<br>安装相应的库；或是链接时没有在查询库内，添加相应的链接。<br>2.uboot 、kernel 、roofs 不同层次的一些报错<br>找相应的 Makefile 位置，首先考虑配置不符合原厂支持的要求。其次逐步排查、如是文件错误、即改文件。<br>3. 编译方式错误<br>应当了解各编译配置位置，在哪里编，如何编。不要因为错误的操作导致许多不必要的问题。</p>
<h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><p>1. 应该严格使用原厂的烧录工具或是原厂推荐的烧录工具<br>2. 正确操作烧录；如串口烧录时是否正确选择速率、是否占用等。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不要因为一些不正确的操作导致浪费时间。情愿多花一些时间来了解怎么正确的操作。</p>
]]></content>
      <categories>
        <category>经验之谈</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>环境</tag>
        <tag>compile</tag>
        <tag>brun</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+action+hexo 构建自动部署博客</title>
    <url>/2022/06/16/GitHub_action_hexo/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>想要一个自己的博客写文，但我又想白嫖。又不想花过多时间去管理博客后台。</p>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>性质：材料<br>博客的主要原材料，拥有不俗的各路开发者提供的精美主题。</p>
<p>了解更多: <a href="https://hexo.io/">hexo</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>GitHub 提供的 action 在线部署来执行源码动作，page 作为静态访问，因此需要两个仓库。</p>
<p>action 详解: <a href="https://docs.github.com/cn//actions">action</a></p>
<p>page 详解: <a href="https://pages.github.com/">page</a></p>
<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="https://cdn.jsdelivr.net/gh/Mark-cx0/picbs@main/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9C%A8%E7%BA%BF%E5%8D%9A%E5%AE%A2.png" alt="简单创建过程"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Mark-cx0/picbs@main/GitHubActionHexo.png" alt="关系图"></p>
<h2 id="步骤执行"><a href="#步骤执行" class="headerlink" title="步骤执行"></a>步骤执行</h2><h3 id="获取hexo"><a href="#获取hexo" class="headerlink" title="获取hexo"></a>获取 hexo</h3><p>直接百度 hexo，进入官网。</p>
<p>1. 若安装在本地，可稍后上传至 github<br>2. 若想直接 fork，先 GitHub 所需建的库</p>
<h3 id="github库"><a href="#github库" class="headerlink" title="github库"></a>github 库</h3><p>在你的 github 新建两个库，一个私有（也可公有：这样其他人也可以访问到你的源码）、一个公有</p>
<p>私有库：存放源码<br>公有库：访问节点，存静态 HTML。库名： &lt;你的 GitHub 用户名&gt;.github.io.git 类如：xxx.github.io.git </p>
<h3 id="关联两个仓库"><a href="#关联两个仓库" class="headerlink" title="关联两个仓库"></a>关联两个仓库</h3><p>本地 ssh 生成<br>存放源码仓库使用生产的私钥；自己 GitHub 仓库设置公钥。</p>
<h3 id="action创建流"><a href="#action创建流" class="headerlink" title="action创建流"></a>action 创建流</h3><p>在源码仓库 action 中创建一个新的流用来进行构建。</p>
<h3 id="注：笼统记录，详解见下列参考"><a href="#注：笼统记录，详解见下列参考" class="headerlink" title="注：笼统记录，详解见下列参考"></a>注：笼统记录，详解见下列参考</h3><p><a href="https://blog.csdn.net/qq_41426117/article/details/108703295">GitHub Action + Hexo 实现在线写作</a></p>
<p><a href="https://blog.csdn.net/u012208219/article/details/106883054">利用 GitHub+Actions 自动部署 Hexo 博客</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>GitHub</tag>
        <tag>在线部署</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>文章标题</title>
    <url>/2022/08/19/blog_sample/</url>
    <content><![CDATA[<h2 id="示例模板"><a href="#示例模板" class="headerlink" title="示例模板"></a>示例模板</h2><p>这是一个 hexo 文章模板！</p>
]]></content>
      <categories>
        <category>博客模板</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
        <tag>标签3</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware 问题记录</title>
    <url>/2022/08/19/%E6%88%91%E9%81%87%E5%88%B0VMware%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我在安装和使用 VMware15.5.2 版本遇到的一些问题。</p>
<h2 id="问题一：安装时一直卡在”正在安装虚拟网络驱动…”"><a href="#问题一：安装时一直卡在”正在安装虚拟网络驱动…”" class="headerlink" title="问题一：安装时一直卡在”正在安装虚拟网络驱动…”"></a>问题一：安装时一直卡在” 正在安装虚拟网络驱动…”</h2><p>环境：<br>硬件架构环境：x86<br>软件环境：win10</p>
<p>问题根源：<br>  因为原来的电脑上是装有 VMware16.2 的，我手动操作卸载。实际上在 win10 内的注册表中关于 VMware 的信息仍旧存在。<br>解决：<br>  1. 自己手动卸载注册表中的相关信息。(不推荐：因为你不清楚 VMware 进行了哪些注册，以及手动寻找繁琐，毕竟作为工具来使用 VMware 而不是开发它)。<br>  2. 使用工具 CCleaner 帮助清除后安装</p>
<h2 id="问题二：VMware安装VMware-tool后仍旧无法主CP和虚拟机段相互复制粘贴"><a href="#问题二：VMware安装VMware-tool后仍旧无法主CP和虚拟机段相互复制粘贴" class="headerlink" title="问题二：VMware安装VMware tool后仍旧无法主CP和虚拟机段相互复制粘贴"></a>问题二：VMware 安装 VMware tool 后仍旧无法主 CP 和虚拟机段相互复制粘贴</h2><p>环境：<br>软件环境：VMware15.5.2、Ubuntu18.04</p>
<p>问题根源：<br>  从 Ubuntu14.04 开始 open-vm-tools 代替了官方 VMware Tools，所以应该改安装 open-vm-tools <br>解决：<br>  <code>apt-get install open-vm-tools-desktop fuse</code></p>
<p>总结：一般对于软环境出现的不兼容事件很多，在使用软件时应该遵循软件发布者的准确要求，并且理解软件使用方式方法。无需自己画蛇添足自寻烦恼！</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>环境</tag>
        <tag>tool</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Picgo 设置 github 图床</title>
    <url>/2022/07/26/picgo_github/</url>
    <content><![CDATA[<h3 id="下载picgo"><a href="#下载picgo" class="headerlink" title="下载picgo"></a>下载 picgo</h3><blockquote>
<ol>
<li><a href="https://github.com/Molunerfinn/PicGo/releases/">picgo 下载</a><br>根据需要进行下载</li>
<li>安装</li>
<li>图床仓库<blockquote>
<ol>
<li> github 新建数一个仓库来作为图床数据库 (如果没有 github 账号可以自行使用邮箱进行注册 <a href="https://github.com/">github.com</a>)</li>
<li> 登录 github 后，直接到 Settings/Developer settings 处的 personal access token；点击 Generate new token 创建新的 token<br>找不位置点此处: <a href="https://github.com/settings/tokens">直达 github token</a>。<br>创建时 repo 选项必选其它随意或根据个人需求选择。<br><em>注意：token 创建好以后记得保存，最好长期保存，因为如果你需要在别的电脑也能用 picgo 上传图片的话需要用到</em></li>
</ol>
</blockquote>
</li>
<li> picgo app github 图床仓库设置<br>如下图：<br><img src="https://raw.githubusercontent.com/Mark-cx0/picbs/main/202207291827573.png"></li>
</ol>
</blockquote>
<h3 id="picgo问题记录"><a href="#picgo问题记录" class="headerlink" title="picgo问题记录"></a>picgo 问题记录</h3><blockquote>
<p>问题：同一张图片二次上传如果上传失败提示：“请检查网络或者配置”<br>参考解决方案：</p>
<ol>
<li>重启 picgo</li>
<li> 到 picgo 设置 -&gt; 时间戳重命名；将其设置为开。</li>
</ol>
</blockquote>
<h3 id="raw-githubusercontent-com代理点失效问题"><a href="#raw-githubusercontent-com代理点失效问题" class="headerlink" title="raw.githubusercontent.com代理点失效问题"></a>raw.githubusercontent.com 代理点失效问题</h3><blockquote>
<p>问题：写这篇文章时 picgo 到 github 的代理域为 raw.githubusercontent.com, 因为是国外的；<br>墙的缘故可能导致失效无法访问到 github，我曾经遇到过此类问题。<br>参考解决方案：</p>
<blockquote>
<ol>
<li>进行域名的 ip 查询 -&gt;<a href="https://ip.cn/">IP 查询</a> </li>
<li>打开电脑的 host 文件；Windows host 文件位置 (C:\Windows\System32\drivers\etc)</li>
<li><code>win+r</code> 输入 cmd 打开命令行窗口 <code>ping [ip]</code> 查询此 ip 是否可用，如不可用大概率被墙。<br>硬要用者，可以考虑科学上网<img src="https://user-images.githubusercontent.com/59907961/181743769-363f15db-94fb-4a92-8334-ae9fa1b8d7b7.png" alt="01665A38"></li>
<li>末尾输入如下格式 [ip 域名] 如：185.199.109.133 raw.githubusercontent.com<br>意为使用 ip 代替域名进行访问</li>
<li>命令行输入：<code>ipconfig/flushdns</code> 刷新一下 DNS</li>
<li> 再次尝试访问域名</li>
</ol>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>picgo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>linux cp 命令无法创建链接符号</title>
    <url>/2022/07/25/cp_dont_user_link/</url>
    <content><![CDATA[<h3 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h3><blockquote>
<p>在 Ubuntu 下使用 cp 命令进行复制的时候，所复制的目录下的链接无法创建。<br>如下图：</p>
</blockquote>
<blockquote>
<p><img src="https://raw.githubusercontent.com/Mark-cx0/picbs/main/202207291712443.png" alt="截图"></p>
</blockquote>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote>
<p><code>cp --help</code> 查看帮助目录<br>-L, –dereference            always follow symbolic links in SOURCE<br>其中 - L 参数                   始终遵循源中的符号链接<br><em>所以 <code>cp -rLf</code> [复制的目录]</em></p>
</blockquote>
]]></content>
      <categories>
        <category>linux 命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
</search>
